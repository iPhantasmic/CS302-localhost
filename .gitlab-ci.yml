# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
image: golang:latest

stages:
- lint
- test
- build

format:
  stage: lint
  script:
  - go fmt $(go list ./...)
  - go vet $(go list ./...)

compile:
  stage: build
  script:
  - mkdir -p auth_service
  - go build -o auth_service ./...
  artifacts:
    paths:
    - auth_service

# sast:
#   stage: test
#   variables:
#     SAST_EXCLUDED_ANALYZERS: bandit, brakeman, eslint, flawfinder, kubesec, nodejs-scan,
#       phpcs-security-audit, pmd-apex, security-code-scan, sobelow, spotbugs
# include:
# - template: Security/SAST.gitlab-ci.yml

semgrep:
  stage: test
  image: returntocorp/semgrep
  # Run the "semgrep ci" command on the command line of the docker image.
  script: semgrep ci

  # rules:
  # # Scan changed files in MRs, (diff-aware scanning):
  # - if: $CI_MERGE_REQUEST_IID

  # # Scan mainline (default) branches and report all findings.
  # - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

  variables:
    # Add the rules that Semgrep uses by setting the SEMGREP_RULES environment variable.
    SEMGREP_RULES: p/default p/jwt p/golang p/r2c-security-audit # See more at semgrep.dev/explore.