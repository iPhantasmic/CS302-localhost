# type Post {
#   _id: ID
#   title: String
#   body: String
#   createdAt: DateTime
# }

# type Posts {
#   count: Int
#   page: Int
#   limit: Int
#   nodes: [Post]
# }

# type Query {
#   listPosts(page: Int limit: Int): Posts
# }

# Setup
schema {
  query: Query
  mutation: Mutation
}

type Query {
  GetUser(data: GetUserRequest): User
  LoginUser(data: LoginRequest): LoginResponse
  ValidateToken(data: ValidateRequest): ValidateResponse
  PublishBookingConfirmed(data: PublishBookingConfirmedRequest): String
  GetBookingByUser(data:BookingUserId): BookingResponse
}

type Mutation {
  RegisterUser(data: RegisterRequest): RegisterResponse
  MakeBooking(data:MakeBookingRequest): DeleteReturnMessage
}
#

# User Service
type User {
  userId: String
  email: String
}

input GetUserRequest {
  userId: String
}
#

# Auth Service
input RegisterRequest {
  email: String
  password: String
}
type RegisterResponse {
  message: String
}

input LoginRequest {
  email: String
  password: String
}
type LoginResponse {
  userId: String
  token: String
}

input ValidateRequest {
  token: String
}
type ValidateResponse {
  userId: String
}
#

input PublishBookingConfirmedRequest {
  receiverEmail: String
  propertyName: String
  receiptId: String
  paymentDate: String
  paymentTime: String
  bookingStartDate: String
  bookingEndDate: String
  unitPrice: Float
  numNights: Int
  subTotal: Float
  serviceFee: Float
  totalPrice: Float
}

type BookingResponse{
  bookings:[Booking]
}

type DeleteReturnMessage{
  returnMessage: String
}

type Booking {
  id: Int
  userId: Int
  listingId: Int
  hostId: Int
  startDate: String
  endDate: String
  paymentId: Int
}

input BookingUserId{
  userId: Int
}

input MakeBookingRequest {
  endDate: String
  hostId: Int
  listingId: Int
  paymentId: Int
  startDate: String
  userId: Int
}
