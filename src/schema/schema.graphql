# type Post {
#   _id: ID
#   title: String
#   body: String
#   createdAt: DateTime
# }

# type Posts {
#   count: Int
#   page: Int
#   limit: Int
#   nodes: [Post]
# }

# input addPostInput {
#   title: String
#   body: String
# }

# type addPostOutput {
#   message: String
#   result: Post
# }

# type Query {
#   listPosts(page: Int limit: Int): Posts
# }

# type Mutation {
#   addPost(data: addPostInput): addPostOutput
# }

type User {
    userId: String
    email: String
}

input GetUserRequest {
    userId: String
}

input PublishBookingConfirmedRequest {
    receiverEmail: String
    propertyName: String
    receiptId: String
    paymentDate: String
    paymentTime: String
    bookingStartDate: String
    bookingEndDate: String
    unitPrice: Float
    numNights: Int
    subTotal: Float
    serviceFee: Float
    totalPrice: Float
}

type BookingResponse{
  bookings:[Booking]
}

type DeleteReturnMessage{
  returnMessage: String
}

type Booking {
    id: Int
    userId: Int
    listingId: Int
    hostId: Int
    startDate: String
    endDate: String
    paymentId: Int
}

input BookingUserId{
  userId: Int
}

input BookingId{
  bookingId: Int
}



type Query {
    GetUser(data: GetUserRequest): User
    PublishBookingConfirmed(data: PublishBookingConfirmedRequest): String
    GetBookingByUser(data:BookingUserId): BookingResponse
    MakeBooking(data:BookingUserId):BookingResponse
    # DeleteBookingById(data:BookingId):DeleteReturnMessage
}

schema {
    query: Query
    # mutation: Mutation
}
