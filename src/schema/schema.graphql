# type Post {
#   _id: ID
#   title: String
#   body: String
#   createdAt: DateTime
# }

# type Posts {
#   count: Int
#   page: Int
#   limit: Int
#   nodes: [Post]
# }

# input addPostInput {
#   title: String
#   body: String
# }

# type addPostOutput {
#   message: String
#   result: Post
# }

# type Query {
#   listPosts(page: Int limit: Int): Posts
# }



type User {
    userId: String
    email: String
}

input GetUserRequest {
    userId: String
}

input ProtobufTimestampInput {
    nanos: Int
    seconds: String
}

type ProtobufTimestampOutput {
    nanos: Int
    seconds: String
}

input PublishBookingConfirmedRequest {
    receiverEmail: String
    propertyName: String
    receiptId: String
    paymentDate: String
    paymentTime: String
    bookingStartDate: String
    bookingEndDate: String
    unitPrice: Float
    numNights: Int
    subTotal: Float
    serviceFee: Float
    totalPrice: Float
}

type BookingResponse {
    bookings: [Booking]
}

type DeleteReturnMessage {
    returnMessage: String
}

type Booking {
    id: String
    userId: String
    listingId: String
    hostId: String
    startDate: String
    endDate: String
    paymentId: Int
}

input BookingUserId {
    userId: Int
}

input MakeBookingRequest {
    userId: String
    listingId: String
    hostId: String
    startDate: ProtobufTimestampInput
    endDate: ProtobufTimestampInput
    paymentId: String
}

input GetReviewRequest {
    reviewId: String
}

input CreateReviewRequest {
    userId: String
    listingId: String
    rating: Int
    review: String
}

type ReviewResponse {
    reviewId: String
    userId: String
    listingId: String
    rating: Int
    review: String
    createdAt: ProtobufTimestampOutput
}

input DeleteReviewRequest {
    reviewId: String
}

type DeleteReviewResponse {
    message: String
}

input GetListingRequest {
  listingId: String
}

type ListingResponse{
  listingId:String
  userId:String
  title:String
  price:Int
  images: [String]
  type:String
  address:String
  country:String
  city:String
  rooms:Int
  startDate:ProtobufTimestampOutput
  createdAt:ProtobufTimestampOutput
}

type ListingsResponse{
  listings:[ListingResponse]
}

input FilterLocationRoomRequest{
  country:String
  city:String
  rooms:Int
  startDate:ProtobufTimestampInput
  endDate:ProtobufTimestampInput
}

input ListingImage{
  filename:String
  data:String
}

input CreateListingRequest{
  userId:String
  title:String
  price:Int
  images:[ListingImage]
  type:String
  address:String
  country:String
  city:String
  rooms:Int
  startDate:ProtobufTimestampInput
}

input UpdateListingRequest{
  listingId:String
  title:String
  price:Int
  images:[ListingImage]
  type:String
  address:String
  country:String
  city:String
  rooms:Int
  startDate:ProtobufTimestampInput
}

input DeleteListingRequest{
  listing_id:String
}

type DeleteListingResponse{
  message:String
}

type Query {
    GetUser(data: GetUserRequest): User
    GetBookingByUser(data: BookingUserId): BookingResponse
    GetReview(data: GetReviewRequest): ReviewResponse
    GetListing(data:GetListingRequest) : ListingResponse

    #Please help to review this and think of a better way
    GetAllListings(data:String!): ListingsResponse

    GetAvailableListings(data:FilterLocationRoomRequest):ListingsResponse
}

type Mutation {
    MakeBooking(data: MakeBookingRequest): DeleteReturnMessage
    CreateReview(data: CreateReviewRequest): ReviewResponse
    DeleteReview(data: DeleteReviewRequest): DeleteReviewResponse
    CreateListing(data:CreateListingRequest):ListingResponse
    PublishBookingConfirmed(data: PublishBookingConfirmedRequest): String
    DeleteListing(data:DeleteListingRequest): DeleteListingResponse
    UpdateListing(data:UpdateListingRequest):ListingResponse
}

schema {
    query: Query
    mutation: Mutation
}
