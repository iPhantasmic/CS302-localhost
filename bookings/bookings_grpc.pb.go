// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: bookings.proto

package bookings_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookingServiceClient is the client API for BookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingServiceClient interface {
	CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*Booking, error)
	GetBookingByUser(ctx context.Context, in *BookingByUserRequest, opts ...grpc.CallOption) (*GetBookingArrayResponse, error)
	GetBookingByListing(ctx context.Context, in *BookingByListingRequest, opts ...grpc.CallOption) (*GetBookingArrayResponse, error)
	UpdateBookingById(ctx context.Context, in *UpdateBookingRequest, opts ...grpc.CallOption) (*ReturnMessage, error)
	DeleteBookingByUserId(ctx context.Context, in *BookingByUserRequest, opts ...grpc.CallOption) (*ReturnMessage, error)
	DeleteBookingByListingId(ctx context.Context, in *BookingByListingRequest, opts ...grpc.CallOption) (*ReturnMessage, error)
	DeleteBookingById(ctx context.Context, in *BookingByIdRequest, opts ...grpc.CallOption) (*ReturnMessage, error)
	GetAvailableListings(ctx context.Context, in *GetAvailableListingsRequest, opts ...grpc.CallOption) (*GetAvailableListingsResponse, error)
}

type bookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingServiceClient(cc grpc.ClientConnInterface) BookingServiceClient {
	return &bookingServiceClient{cc}
}

func (c *bookingServiceClient) CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*Booking, error) {
	out := new(Booking)
	err := c.cc.Invoke(ctx, "/bookings.BookingService/CreateBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingByUser(ctx context.Context, in *BookingByUserRequest, opts ...grpc.CallOption) (*GetBookingArrayResponse, error) {
	out := new(GetBookingArrayResponse)
	err := c.cc.Invoke(ctx, "/bookings.BookingService/GetBookingByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingByListing(ctx context.Context, in *BookingByListingRequest, opts ...grpc.CallOption) (*GetBookingArrayResponse, error) {
	out := new(GetBookingArrayResponse)
	err := c.cc.Invoke(ctx, "/bookings.BookingService/GetBookingByListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) UpdateBookingById(ctx context.Context, in *UpdateBookingRequest, opts ...grpc.CallOption) (*ReturnMessage, error) {
	out := new(ReturnMessage)
	err := c.cc.Invoke(ctx, "/bookings.BookingService/UpdateBookingById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) DeleteBookingByUserId(ctx context.Context, in *BookingByUserRequest, opts ...grpc.CallOption) (*ReturnMessage, error) {
	out := new(ReturnMessage)
	err := c.cc.Invoke(ctx, "/bookings.BookingService/DeleteBookingByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) DeleteBookingByListingId(ctx context.Context, in *BookingByListingRequest, opts ...grpc.CallOption) (*ReturnMessage, error) {
	out := new(ReturnMessage)
	err := c.cc.Invoke(ctx, "/bookings.BookingService/DeleteBookingByListingId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) DeleteBookingById(ctx context.Context, in *BookingByIdRequest, opts ...grpc.CallOption) (*ReturnMessage, error) {
	out := new(ReturnMessage)
	err := c.cc.Invoke(ctx, "/bookings.BookingService/DeleteBookingById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetAvailableListings(ctx context.Context, in *GetAvailableListingsRequest, opts ...grpc.CallOption) (*GetAvailableListingsResponse, error) {
	out := new(GetAvailableListingsResponse)
	err := c.cc.Invoke(ctx, "/bookings.BookingService/GetAvailableListings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServiceServer is the server API for BookingService service.
// All implementations must embed UnimplementedBookingServiceServer
// for forward compatibility
type BookingServiceServer interface {
	CreateBooking(context.Context, *CreateBookingRequest) (*Booking, error)
	GetBookingByUser(context.Context, *BookingByUserRequest) (*GetBookingArrayResponse, error)
	GetBookingByListing(context.Context, *BookingByListingRequest) (*GetBookingArrayResponse, error)
	UpdateBookingById(context.Context, *UpdateBookingRequest) (*ReturnMessage, error)
	DeleteBookingByUserId(context.Context, *BookingByUserRequest) (*ReturnMessage, error)
	DeleteBookingByListingId(context.Context, *BookingByListingRequest) (*ReturnMessage, error)
	DeleteBookingById(context.Context, *BookingByIdRequest) (*ReturnMessage, error)
	GetAvailableListings(context.Context, *GetAvailableListingsRequest) (*GetAvailableListingsResponse, error)
	mustEmbedUnimplementedBookingServiceServer()
}

// UnimplementedBookingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServiceServer struct {
}

func (UnimplementedBookingServiceServer) CreateBooking(context.Context, *CreateBookingRequest) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingByUser(context.Context, *BookingByUserRequest) (*GetBookingArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingByUser not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingByListing(context.Context, *BookingByListingRequest) (*GetBookingArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingByListing not implemented")
}
func (UnimplementedBookingServiceServer) UpdateBookingById(context.Context, *UpdateBookingRequest) (*ReturnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookingById not implemented")
}
func (UnimplementedBookingServiceServer) DeleteBookingByUserId(context.Context, *BookingByUserRequest) (*ReturnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookingByUserId not implemented")
}
func (UnimplementedBookingServiceServer) DeleteBookingByListingId(context.Context, *BookingByListingRequest) (*ReturnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookingByListingId not implemented")
}
func (UnimplementedBookingServiceServer) DeleteBookingById(context.Context, *BookingByIdRequest) (*ReturnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookingById not implemented")
}
func (UnimplementedBookingServiceServer) GetAvailableListings(context.Context, *GetAvailableListingsRequest) (*GetAvailableListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableListings not implemented")
}
func (UnimplementedBookingServiceServer) mustEmbedUnimplementedBookingServiceServer() {}

// UnsafeBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServiceServer will
// result in compilation errors.
type UnsafeBookingServiceServer interface {
	mustEmbedUnimplementedBookingServiceServer()
}

func RegisterBookingServiceServer(s grpc.ServiceRegistrar, srv BookingServiceServer) {
	s.RegisterService(&BookingService_ServiceDesc, srv)
}

func _BookingService_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.BookingService/CreateBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).CreateBooking(ctx, req.(*CreateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.BookingService/GetBookingByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingByUser(ctx, req.(*BookingByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingByListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingByListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingByListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.BookingService/GetBookingByListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingByListing(ctx, req.(*BookingByListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_UpdateBookingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).UpdateBookingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.BookingService/UpdateBookingById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).UpdateBookingById(ctx, req.(*UpdateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_DeleteBookingByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).DeleteBookingByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.BookingService/DeleteBookingByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).DeleteBookingByUserId(ctx, req.(*BookingByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_DeleteBookingByListingId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingByListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).DeleteBookingByListingId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.BookingService/DeleteBookingByListingId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).DeleteBookingByListingId(ctx, req.(*BookingByListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_DeleteBookingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).DeleteBookingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.BookingService/DeleteBookingById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).DeleteBookingById(ctx, req.(*BookingByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetAvailableListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetAvailableListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.BookingService/GetAvailableListings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetAvailableListings(ctx, req.(*GetAvailableListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingService_ServiceDesc is the grpc.ServiceDesc for BookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookings.BookingService",
	HandlerType: (*BookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBooking",
			Handler:    _BookingService_CreateBooking_Handler,
		},
		{
			MethodName: "GetBookingByUser",
			Handler:    _BookingService_GetBookingByUser_Handler,
		},
		{
			MethodName: "GetBookingByListing",
			Handler:    _BookingService_GetBookingByListing_Handler,
		},
		{
			MethodName: "UpdateBookingById",
			Handler:    _BookingService_UpdateBookingById_Handler,
		},
		{
			MethodName: "DeleteBookingByUserId",
			Handler:    _BookingService_DeleteBookingByUserId_Handler,
		},
		{
			MethodName: "DeleteBookingByListingId",
			Handler:    _BookingService_DeleteBookingByListingId_Handler,
		},
		{
			MethodName: "DeleteBookingById",
			Handler:    _BookingService_DeleteBookingById_Handler,
		},
		{
			MethodName: "GetAvailableListings",
			Handler:    _BookingService_GetAvailableListings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookings.proto",
}
